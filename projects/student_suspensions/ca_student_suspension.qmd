---
title: "Students with Disabilities and Suspension in California Districts"
format: 
  html:
    code-fold: true
execute:
  fig-height: 8
  fig-width: 8
  warning: false
  message: false
---

## Data

Data gathered from The California Department of Education's [Suspension Data Downloadable Data Files](https://www.cde.ca.gov/ds/ad/filessd.asp)

Data gathered from The California Department of Education's [Special Education Downloadable Data Files](https://www.cde.ca.gov/ds/ad/filesspedps.asp)

Data was then loaded from the `txt` files and saved as csv files in case files were changed from the California Department of Education. You can find the data files as `csv` files [here]().

```{r}
react_table <- function(data){
  {{data}} |>
  reactable::reactable(
    filterable = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    minRows = 10
  )
}

library(tidyverse)
library(cmdstanr)
library(rstan)
library(posterior)
library(bayesplot)
library(brms)
library(broom)
library(broom.mixed)
library(tidybayes)

theme_set(theme_light())

two_three <- read_csv(here::here("projects/student_suspensions/data", "special_education_2022_2023.csv"))
suspend23 <- read_csv(here::here("projects/student_suspensions/data", "suspension_2022_2023.csv"))

suspend23 <- suspend23 |>
  filter(
    aggregate_level == "D" &
    reporting_category != "TA" &
    charter_yn == "No"
  )

sub23 <- two_three |>
  filter(
    reporting_category != "TA" &
    aggregate_level == "D" &
    charter_school == "N"
  )

suspend23 <- suspend23 |> filter(reporting_category == "SD")

data <- inner_join(
  sub23,
  suspend23,
  by = c(
    "academic_year",
    "aggregate_level",
    "county_code",
    "district_code",
    "county_name",
    "district_name"
    )
  )

data <- data |> 
  select(
    -c(
      school_name.x,
      school_code.x,
      reporting_category.y,
      school_code.y,
      school_name.y
    )
  ) |>
  rename(reporting_category = reporting_category.x)

data <- data |>
  mutate(
    across(
      c(
        sped_enr_n:ps_muk_percent,
        cumulative_enrollment:suspension_count_other_reasons
      ),
      ~case_when(
        .x == "*" ~ NA_character_,
        TRUE ~ .x
      )
    )
  )

data <- data |>
  select(
    academic_year:district_name,
    reporting_category:ps_muk_percent,
    cumulative_enrollment:suspension_count_other_reasons
  )

data <- data |>
  mutate(
    across(
      c(
        sped_enr_n:suspension_count_other_reasons
      ),
      ~as.numeric(.x)
    )
  )

data <- data |> 
  filter(
    str_detect(
      reporting_category,
      "DC"
    )
  )

data <- 
data |> 
  drop_na(
    total_suspensions,
    cumulative_enrollment,
    suspension_count_defiance_only,
    ps_rcgt80_percent,
    county_name,
    reporting_category
  )



data <- data |>
  mutate(
    reporting_category = as.factor(reporting_category),
    reporting_category = relevel(
      reporting_category,
      "DC_SLD"
    )
  )
```

## Variables of interest in data

- reporting category
  
    - DC_AUT = Autism (AUT)
    - DC_DB = Deaf Blindedness (DB)
    - DC_DFHI = Deaf (DF)/Hearing Impairment (HI)
    - DC_ED = Emotional Disturbance (ED)
    - DC_EMD = Established Medical Disability (EMD)
    - DC_HH = Hard of Hearing (HH)
    - DC_ID = Intellectual Disability (ID)
    - DC_MD = Multiple Disabilities (MD)
    - DC_OHI = Other Health Impairment (OHI)
    - DC_OI = Orthopedic Health Impairment (OI)
    - DC_SLD = Specific Learning Disability (SLD) **Reference Group**
    - DC_SLI = Speech or Language Impairment (SLI)
    - DC_TBI = Traumatic Brain Injury (TBI)
    - DC_VI = Visual Impairment (VI)

- ps_rcgt80_percent

    - A program setting where a student with disabilities participates in regular general education classroom setting, which includes at least 50 percent nondisabled students, at least 80 percent of the school day. On the report, data in these columns represent the number/percentage of the Special Education Enrollment for students whose Special Education Program Setting is Regular Classroom/Public Day School or Regular Independent Study or Virtual Charter and whose General Education Classroom Setting is Regular Class 80 Percent or More of the Day.

```{r}
data |>
  ggplot(
    aes(
      ps_rcgt80_percent
    )
  ) +
  geom_histogram(
    fill = "dodgerblue"
  )

data |> 
  count(
    reporting_category
    ) |>
  ggplot(
    aes(
      fct_reorder(
        as.factor(reporting_category),
        n
      ),
      n
    )
  ) +
  geom_col(
    position = "dodge"
  ) +
  coord_flip()

data |>
  count(
    reporting_category
  ) |>
  arrange(desc(n)) |>
  reactable()

data |>
  ggplot(
    aes(
      ps_rcgt80_percent,
      unduplicated_count_of_students_suspended_defiance_only
    )
  ) +
  geom_point(alpha = .3) +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) +
  theme(
    legend.position = "none"
  )

data |>
  ggplot(
    aes(
      ps_rcgt80_percent,
      suspension_count_defiance_only
    )
  ) +
  geom_point(alpha = .3) +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) +
  theme(
    legend.position = "none"
  )

data |>
  ggplot(
    aes(
      suspension_count_defiance_only
    )
  ) +
  geom_histogram(
    fill = "dodgerblue"
  )
```

## Checking Predictors

```{r}
data |>
  count(
    suspension_count_defiance_only,
    sort = TRUE
  ) |>
  mutate(
    percent =(n/sum(n))*100
  )

data |>
  inspectdf::inspect_cor(with = "suspension_count_defiance_only") |>
  inspectdf::show_plot()

cor.test(data$ps_rcgt80_n, data$sped_enr_n)
```

## Modeling

### No Covariates

```{r}
#| eval: false
#| echo: true

fit_no <- brm(
  suspension_count_defiance_only ~ as.factor(reporting_category)*ps_rcgt80_percent + (1 | county_name),
  data = data,
  family = gaussian(),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores() - 1,
  control = list(adapt_delta = .9),
  # warmup = 2000,
  # iter = 4000,
  seed = 12345,
  backend = "cmdstanr"
)

saveRDS(fit_no, here::here("projects/student_suspensions/data", "model_fit_no_covariates.RDS"))
```

### With Covariates

```{r}
#| eval: false
#| echo: true

fit <- brm(
  suspension_count_defiance_only ~ as.factor(reporting_category)*ps_rcgt80_percent + cumulative_enrollment + total_suspensions + (1 | county_name),
  data = data,
  family = gaussian(),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores() - 1,
  control = list(adapt_delta = .9),
  # warmup = 2000,
  # iter = 4000,
  seed = 12345,
  backend = "cmdstanr"
)

saveRDS(fit, here::here("projects/student_suspensions/data", "model_fit_w_covariates.RDS"))
```

```{r}
fit_no <- read_rds(here::here("projects/student_suspensions/data", "model_fit_no_covariates.RDS"))
fit <- read_rds(here::here("projects/student_suspensions/data", "model_fit_w_covariates.RDS"))
```

```{r}
color_scheme_set("viridis")

fit_no

tidy(fit_no) |>
  mutate(
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high
      ),
      ~round(.x, 2)
    )
  ) |>
  arrange(
    desc(
      abs(
        estimate
      )
    )
  ) |>
  react_table()

none <- ranef(fit_no)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )

none

pp_check(fit_no)

pp_check(
  fit_no,
  type = "intervals",
  prefix = "ppc"
  )

pp_check(
  fit_no,
  type = "error_hist",
  prefix = "ppc"
  )

fit_no$data |> head()

y <- data$suspension_count_defiance_only
yrep <- posterior_predict(fit_no)

length(y_no) == ncol(yrep)

mcmc_trace(
  fit_no,
  pars = c(
    "sd_county_name__Intercept",
    "sigma",
    "Intercept"
  ) 
)

mcmc_trace(
  fit_no,
  regex_pars = "b_" 
)

mcmc_trace(
  fit_no,
  regex_pars = "^r_"
)


mcmc_intervals(
  fit_no,
  pars = c(
    "sd_county_name__Intercept",
    "sigma",
    "Intercept"
  ) 
)

mcmc_intervals(
  fit_no,
  regex_pars = "b_"
)

mcmc_intervals(
  fit_no,
  regex_pars = "^r_"
)

# compare y to yrep
ppc_stat(y_no, yrep, stat = "median")
ppc_stat(y_no, yrep, stat = "sd")

# predictions
levels(data$reporting_category)
levels(as.factor(data$county_name))

report_cat_prob <- c(.05, .16, .05, .13, .05, .05, .05, .05, .11, .05, .05, .1, .1)
county_prob <- rep(.1, 57)
n <- 1000

# grid_data <- expand_grid(
#   reporting_category = factor(sample(levels(data$reporting_category), size = n, replace = TRUE, prob = report_cat_prob)),
#   ps_rcgt80_percent = rnorm(n, .5, 1),
#   county_name = factor(sample(levels(as.factor(data$county_name)), size = n, replace = TRUE, prob = county_prob))
# )

grid_data <- expand_grid(
  reporting_category = c("DC_AUT", "DC_ID"),
  ps_rcgt80_percent = c(.5),
  county_name = c("Los Angeles", "Orange")
)

grid_data


fit_no_pred <- fit_no |>
  predicted_draws(
    newdata = grid_data
  )

mean(fit_no_pred$.prediction)
median(fit_no_pred$.prediction)
sd(fit_no_pred$.prediction)

get_variables(fit_no)
```

```{r}
fit

tidy(fit) |>
  mutate(
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high
      ),
      ~round(.x, 2)
    )
  ) |>
  arrange(
    desc(
      abs(
        estimate
      )
    )
  ) |>
  react_table()

tidy(fit) |>
  filter(
    term %in% c(
      "as.factorreporting_categoryDC_TBI:ps_rcgt80_percent",
      "as.factorreporting_categoryDC_VI:ps_rcgt80_percent",
      "sd__(Intercept)",
      "sd__Observation",
      "total_suspensions"
    )
  ) |>
  mutate(
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high
      ),
      ~round(.x, 2)
    )
  ) |>
  arrange(
    desc(
      abs(
        estimate
      )
    )
  ) |>
  react_table()

data |> 
  filter(
    reporting_category %in% c(
      "DC_SLD",
      "DC_TBI",
      "DC_VI"
    )
  ) |>
  ggplot(
    aes(
      ps_rcgt80_percent,
      suspension_count_defiance_only
    )
  ) +
  geom_point(
    aes(
      color = reporting_category
    )
  ) +
  geom_smooth(
    method = "lm",
    se = FALSE,
    aes(
      color = reporting_category
    )
  ) +
  viridis::scale_color_viridis(
    discrete = TRUE
  ) +
  theme_light()

covariates <- ranef(fit)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )

covariates

pp_check(fit, ndraws = 500)

pp_check(
  fit,
  type = "hist",
  prefix = "ppc"
  )

pp_check(
  fit,
  type = "error_hist",
  prefix = "ppc"
  )

yrep2 <- posterior_predict(fit)

length(y_fit)
ncol(yrep2)

mcmc_trace(
  fit,
  pars = c(
    "sd_county_name__Intercept",
    "sigma",
    "Intercept"
  ) 
)

mcmc_trace(
  fit,
  regex_pars = "b_" 
)

mcmc_trace(
  fit,
  regex_pars = "^r_"
)

mcmc_intervals(
  fit,
  regex_pars = "b_"
)


# compare y to yrep
ppc_stat(y_fit, yrep2, stat = "median")
ppc_stat(y_fit, yrep2, stat = "sd")

grid_data <- grid_data |> 
  mutate(
    cumulative_enrollment = c(500),
    total_suspensions = 0
  )

fit_pred <- fit |>
  predicted_draws(
    newdata = grid_data
  )

mean(fit_pred$.prediction)
median(fit_pred$.prediction)
sd(fit_pred$.prediction)

get_variables(fit)

yrep2_df <- yrep2 |> 
  as_tibble() |>
  summarize(
    across(
      everything(),
      list(
        mean = ~mean(.x, na.rm = TRUE),
        median = ~median(.x, na.rm = TRUE),
        sd = ~sd(.x, na.rm = TRUE),
        min = ~min(.x, na.rm = TRUE),
        max = ~max(.x, na.rm = TRUE)
      )
    )
  ) |>
  pivot_longer(
    cols = everything()
  )

# posterior predictive p-value (PPP)
yrep2_df |>
  filter(
    str_detect(
      name,
      "mean"
    )
  ) |>
  mutate(
    y_fit = mean(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "median"
    )
  ) |>
  mutate(
    y_fit = median(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "sd"
    )
  ) |>
  mutate(
    y_fit = sd(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "min"
    )
  ) |>
  mutate(
    y_fit = min(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "max"
    )
  ) |>
  mutate(
    y_fit = max(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )
```

# Count Model

```{r}
#| echo: true
#| eval: false

cfit <- brm(
  suspension_count_defiance_only ~ as.factor(reporting_category)*ps_rcgt80_percent +
  cumulative_enrollment + total_suspensions +
  (1 | county_name),
  data = data,
  family = zero_inflated_poisson("log"),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores() - 1,
  control = list(adapt_delta = .9),
  # warmup = 2000,
  # iter = 4000,
  seed = 12345,
  backend = "cmdstanr"
)

saveRDS(cfit, here::here("projects/student_suspensions/data", "count_fit_w_covariates.RDS"))
```

```{r}
cfit <- read_rds(here::here("projects/student_suspensions/data", "count_fit_w_covariates.RDS"))
```

```{r}
cfit

tidy(cfit) |>
  mutate(
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high
      ),
      ~round(.x, 2)
    )
  ) |>
  arrange(
    desc(
      abs(
        estimate
      )
    )
  ) |>
  react_table()

count_random <- ranef(cfit)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )

count_random

pp_check(cfit)

pp_check(
  cfit,
  type = "intervals",
  prefix = "ppc"
  )

pp_check(
  cfit,
  type = "hist",
  prefix = "ppc"
  )

pp_check(
  cfit,
  type = "error_hist",
  prefix = "ppc"
  )

yrep3 <- posterior_predict(cfit)

length(y_fit)
ncol(yrep2)

mcmc_trace(
  fit,
  pars = c(
    "sd_county_name__Intercept",
    "sigma",
    "Intercept"
  ) 
)

mcmc_trace(
  fit,
  regex_pars = "b_" 
)

mcmc_trace(
  fit,
  regex_pars = "^r_"
)

mcmc_intervals(
  fit,
  regex_pars = "b_"
)


# compare y to yrep
ppc_stat(y_fit, yrep2, stat = "median")
ppc_stat(y_fit, yrep2, stat = "sd")

grid_data <- grid_data |> 
  mutate(
    cumulative_enrollment = c(500),
    total_suspensions = 0
  )

fit_pred <- fit |>
  predicted_draws(
    newdata = grid_data
  )

mean(fit_pred$.prediction)
median(fit_pred$.prediction)
sd(fit_pred$.prediction)

get_variables(fit)

yrep2_df <- yrep2 |> 
  as_tibble() |>
  summarize(
    across(
      everything(),
      list(
        mean = ~mean(.x, na.rm = TRUE),
        median = ~median(.x, na.rm = TRUE),
        sd = ~sd(.x, na.rm = TRUE)
      )
    )
  ) |>
  pivot_longer(
    cols = everything()
  )

# posterior predictive p-value (PPP)
yrep2_df |>
  filter(
    str_detect(
      name,
      "mean"
    )
  ) |>
  mutate(
    y_fit = mean(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "median"
    )
  ) |>
  mutate(
    y_fit = median(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep2_df |>
  filter(
    str_detect(
      name,
      "sd"
    )
  ) |>
  mutate(
    y_fit = sd(y_fit),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )
```

# Logit Model

```{r}
#| echo: true
#| eval: false

data <- data |>
  mutate(
    defiance = case_when(
      suspension_count_defiance_only == 0 ~ 0,
      TRUE ~ 1
    )
  )

lfit <- brm(
  defiance ~ as.factor(reporting_category)*ps_rcgt80_percent +
  cumulative_enrollment + total_suspensions +
  (1 | county_name),
  data = data,
  family = bernoulli(link = "logit"),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores() - 1,
  control = list(adapt_delta = .9),
  # warmup = 2000,
  # iter = 4000,
  seed = 12345,
  backend = "cmdstanr"
)

saveRDS(lfit, here::here("projects/student_suspensions/data", "logistic_fit_w_covariates.RDS"))
```

```{r}
lfit <- read_rds(here::here("projects/student_suspensions/data", "logistic_fit_w_covariates.RDS"))
```

```{r}
lfit

tidy(lfit) |>
  mutate(
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high
      ),
      ~round(.x, 2)
    )
  ) |>
  # arrange(
  #   desc(
  #     abs(
  #       estimate
  #     )
  #   )
  # ) |>
  react_table()

tidy(lfit) |>
  filter(
    effect == "fixed"
  ) |>
  mutate(
    odds = exp(estimate),
    across(
      c(
        estimate,
        std.error,
        conf.low,
        conf.high,
        odds
      ),
      ~round(.x, 2)
    )
  ) |>
  select(
    term,
    estimate:odds
  ) |>
  react_table()

logit_random <- ranef(lfit)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )

logit_random

pp_check(lfit)

pp_check(
  lfit,
  type = "intervals",
  prefix = "ppc"
  )

pp_check(
  lfit,
  type = "hist",
  prefix = "ppc"
  )

pp_check(
  lfit,
  type = "error_hist",
  prefix = "ppc"
  )


yrep4 <- posterior_predict(lfit)

length(y)
ncol(yrep4)

get_variables(lfit)

mcmc_trace(
  lfit,
  pars = c(
    "sd_county_name__Intercept",
    "Intercept"
  ) 
)

mcmc_trace(
  lfit,
  regex_pars = "b_" 
)

mcmc_trace(
  lfit,
  regex_pars = "^r_"
)

mcmc_intervals(
  lfit,
  regex_pars = "b_"
)


# compare y to yrep
ppc_stat(y, yrep4, stat = "median")
ppc_stat(y, yrep4, stat = "sd")

lfit_pred <- lfit |>
  predicted_draws(
    newdata = grid_data
  )

mean(lfit_pred$.prediction)
median(lfit_pred$.prediction)
sd(lfit_pred$.prediction)

# get_variables(lfit)

yrep4_df <- yrep4 |> 
  as_tibble() |>
  summarize(
    across(
      everything(),
      list(
        mean = ~mean(.x, na.rm = TRUE),
        median = ~median(.x, na.rm = TRUE),
        sd = ~sd(.x, na.rm = TRUE),
        min = ~min(.x, na.rm = TRUE),
        max = ~max(.x, na.rm = TRUE)
      )
    )
  ) |>
  pivot_longer(
    cols = everything()
  )

# posterior predictive p-value (PPP)
yrep4_df |>
  filter(
    str_detect(
      name,
      "mean"
    )
  ) |>
  mutate(
    y_fit = mean(y),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep4_df |>
  filter(
    str_detect(
      name,
      "median"
    )
  ) |>
  mutate(
    y_fit = median(y),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep4_df |>
  filter(
    str_detect(
      name,
      "sd"
    )
  ) |>
  mutate(
    y_fit = sd(y),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep4_df |>
  filter(
    str_detect(
      name,
      "min"
    )
  ) |>
  mutate(
    y_fit = min(y),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )

yrep4_df |>
  filter(
    str_detect(
      name,
      "max"
    )
  ) |>
  mutate(
    y_fit = max(y),
    over_under = value > y_fit,
    over_under = case_when(
      over_under == TRUE ~ 1,
      over_under == FALSE ~ 0
    )
  ) |>
  summarize(
    prob = mean(over_under)
  )
```

```{r}
library(patchwork)

none/covariates
```

## All Code Below


```{r}
sessioninfo::session_info()
```


```{r}
#| eval: false
#| echo: true

library(tidyverse)
library(reactable)
library(cmdstanr)
library(rstan)
library(posterior)
library(bayesplot)
library(brms)
library(broom)
library(broom.mixed)
library(tidybayes)

theme_set(theme_light())

two_three <- read_csv(here::here("projects/student_suspensions/data", "special_education_2022_2023.csv"))
suspend23 <- read_csv(here::here("projects/student_suspensions/data", "suspension_2022_2023.csv"))

suspend23 <- suspend23 |>
  filter(
    aggregate_level == "D" &
    reporting_category != "TA" &
    charter_yn == "No"
  )

sub23 <- two_three |>
  filter(
    reporting_category != "TA" &
    aggregate_level == "D" &
    charter_school == "N"
  )

suspend23 <- suspend23 |> filter(reporting_category == "SD")

data <- inner_join(
  sub23,
  suspend23,
  by = c(
    "academic_year",
    "aggregate_level",
    "county_code",
    "district_code",
    "county_name",
    "district_name"
    )
  )

data <- data |> 
  select(
    -c(
      school_name.x,
      school_code.x,
      reporting_category.y,
      school_code.y,
      school_name.y
    )
  ) |>
  rename(reporting_category = reporting_category.x)

data <- data |>
  mutate(
    across(
      c(
        sped_enr_n:ps_muk_percent,
        cumulative_enrollment:suspension_count_other_reasons
      ),
      ~case_when(
        .x == "*" ~ NA_character_,
        TRUE ~ .x
      )
    )
  )

data <- data |>
  select(
    academic_year:district_name,
    reporting_category:ps_muk_percent,
    cumulative_enrollment:suspension_count_other_reasons
  )

data <- data |>
  mutate(
    across(
      c(
        sped_enr_n:suspension_count_other_reasons
      ),
      ~as.numeric(.x)
    )
  )

data <- data |> drop_na()

data <- data |> 
  filter(
    str_detect(
      reporting_category,
      "DC"
    )
  )

data |> 
  count(
    reporting_category
    ) |>
  ggplot(
    aes(
      fct_reorder(
        as.factor(reporting_category),
        n
      ),
      n
    )
  ) +
  geom_col(
    position = "dodge"
  ) +
  coord_flip()

data |> 
  count(
    reporting_category
    ) |>
    arrange(
      desc(n)
    ) |>
    reactable(
    filterable = TRUE,
    searchable = TRUE
  )

data <- data |>
  filter(
    !reporting_category %in% c("DC_TBI", "DC_EMD")
  )

data |>
  ggplot(
    aes(
      ps_rcgt80_percent,
      unduplicated_count_of_students_suspended_defiance_only
    )
  ) +
  geom_point(alpha = .3) +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) +
  theme(
    legend.position = "none"
  )

data |>
  ggplot(
    aes(
      ps_rcgt80_percent,
      suspension_count_defiance_only
    )
  ) +
  geom_point(alpha = .3) +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) +
  theme(
    legend.position = "none"
  )

data |>
  inspectdf::inspect_cor(with = "suspension_count_defiance_only") |>
  inspectdf::show_plot()

cor.test(data$ps_rcgt80_n, data$sped_enr_n)

fit <- brm(
  suspension_count_defiance_only ~ as.factor(reporting_category)*ps_rcgt80_n  + (1 | county_name),
  data = data,
  family = gaussian(),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores(),
  control = list(adapt_delta = .95),
  seed = 12345,
  backend = "cmdstanr"
)

fit2 <- brm(
  unduplicated_count_of_students_suspended_defiance_only ~ as.factor(reporting_category)*ps_rcgt80_n  + (1 | county_name),
  data = data,
  family = gaussian(),
  prior = c(
    set_prior("normal(0, 1)", class = "b"),
    set_prior("normal(0, 1)", class = "sd")
  ),
  cores = parallel::detectCores(),
  control = list(adapt_delta = .95),
  seed = 12345,
  backend = "cmdstanr"
)

saveRDS(fit, here::here("projects/student_suspensions/data", "model_fit.RDS"))
# saveRDS(fit, here::here("projects/student_suspensions/data", "unduplicated_model_fit.RDS"))

fit <- read_rds(here::here("projects/student_suspensions/data", "model_fit.RDS"))
fit2 <- read_rds(here::here("projects/student_suspensions/data", "unduplicated_model_fit.RDS"))

tidy(fit) |>
  mutate(
    across(
      everything(),
      ~round(.x, 2)
    )
  ) |>
  reactable()

ranef(fit)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )

tidy(fit2) |>
  mutate(
    across(
      -c(
        effect,
        component,
        group,
        term
      ),
      ~round(.x, 2)
    )
  ) |>
  reactable()

ranef(fit2)$county_name |>
  as_tibble(rownames = "county") |>
  ggplot(
    aes(
      fct_reorder(
        county,
        Estimate.Intercept
      ),
      Estimate.Intercept
    )
  ) +
  geom_errorbar(
    aes(
      ymin = Q2.5.Intercept,
      ymax = Q97.5.Intercept
      )
    ) +
  geom_point(
    aes(
      color = county
    ),
    size = 4
  ) +
  coord_flip() +
  theme(
    legend.position = "none"
  )
```